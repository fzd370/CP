#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* Explaination : - 
1. lexicographic_sort() function takes two pointers which point to characters and compares them. This function sorts the characters
   in increasing order i.e. - abb, basc, cdes. So, if the value returned by strcmp() is greater than 1 that means greater charcater is present before smaller character
   and we need to do swapping. That's why we return 1 to string_sort. And if value returned by strcmp() is 0 or -ve then there is no need of swapping. So, we return 0;

2. lexicographic_sort_reverse() function does the opposite of above function. It sorts the characters in decreasing order. 

3. distinct_chars() is the function used to find number of characters in the string and there frequency.

4. sort_by_number_of_distinct_characters() function sorts strings on the basis of distinct characters. We take the difference of distinct characters in both the strings 
   If the diff. is greater than 0, that means stirng with more distinct characters is present before the string which has less number of distinct characters. So, we need to
   do swap.

5. sort_by_length() function sorts strings on the basis of length.

6. We perform string_sort() in O(n^2). We can do better than this by using quick sort or merge sort.
*/

 int lexicographic_sort(const char* a, const char* b) {
     if(strcmp(a,b)>0)
     return 1;
     else return 0;
}

int lexicographic_sort_reverse(const char* a, const char* b) {
    if(strcmp(a,b)>0)
    return 0;
    else return 1;
}

int distinct_chars(const char*c){
    char ch[26];
    int i,count=0;
    for(i=0;i<26;i++)
    ch[i]=0;
    for(i=0;c[i]!='\0';i++){
        ch[c[i]-'a']++;
    }
    for(i=0;i<26;i++)
    if(ch[i]!=0)
    count++;

    return count;
}

int sort_by_number_of_distinct_characters(const char* a, const char* b) {
    int len=distinct_chars(a)-distinct_chars(b);
    if(len>0)
    return 1;
    else if(len==0){
    if(strcmp(a,b)>0)
    return  1;
    else return 0;
    }
    else
    return 0;
}

int sort_by_length(const char* a, const char* b) {
    int len=strlen(a)-strlen(b);
    if(len>0)
    return 1;
    else if(len==0){
        if(strcmp(a,b)>0)
        return 1;
        else 
        return 0;
    }
    else return 0;

}

void string_sort(char** arr,const int len,int (*cmp_func)(const char* a, const char* b)){
    int i,j;
    for(i=0;i<len;i++){
        for(j=0;j<len-1;j++){
            if(cmp_func(arr[j],arr[j+1])){
                char *temp=arr[j];
                arr[j]=arr[j+1];
                arr[j+1]=temp;
            }
        }
    }
    

}


int main() 
{
    int n;
    scanf("%d", &n);
  
    char** arr;
	arr = (char**)malloc(n * sizeof(char*));
  
    for(int i = 0; i < n; i++){
        *(arr + i) = malloc(1024 * sizeof(char));
        scanf("%s", *(arr + i));
        *(arr + i) = realloc(*(arr + i), strlen(*(arr + i)) + 1);
    }
  
    string_sort(arr, n, lexicographic_sort);
    for(int i = 0; i < n; i++)
        printf("%s\n", arr[i]);
    printf("\n");

    string_sort(arr, n, lexicographic_sort_reverse);
    for(int i = 0; i < n; i++)
        printf("%s\n", arr[i]); 
    printf("\n");

    string_sort(arr, n, sort_by_length);
    for(int i = 0; i < n; i++)
        printf("%s\n", arr[i]);    
    printf("\n");

    string_sort(arr, n, sort_by_number_of_distinct_characters);
    for(int i = 0; i < n; i++)
        printf("%s\n", arr[i]); 
    printf("\n");
}